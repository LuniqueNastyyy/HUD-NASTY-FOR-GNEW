function createHUD() {
  const container = document.getElementById('hud-container');
  
  const hudHTML = `
    <div class="hud-frame">
      <div class="hud-bg"></div>
      <div class="hud-rectangle frame-bg"></div>
      <div class="hud-rectangle money-bg-1"></div>
      <div class="hud-rectangle header-bg"></div>
      <div class="hud-text dynasty">VICE WORLD</div>
      <div class="hud-text discord">
        <span class="discord-text active">DISCORD.GG/VICEWORLD</span>
        <span class="tebex-text">TEBEX.IO/VICEWORLDS</span>
      </div>
      <div class="hud-image logo"></div>
      <div class="hud-rectangle money-main-1"></div>
      <div class="hud-rectangle money-bg-2"></div>
      <div class="hud-text money1">$0</div>
      <div class="hud-ellipse icon-circle-1"></div>
      <div class="hud-icon mask"></div>
      <div class="hud-rectangle money-main-2"></div>
      <div class="hud-rectangle money-bg-3"></div>
      <div class="hud-text money2">$0</div>
      <div class="hud-ellipse icon-circle-2"></div>
      <div class="hud-icon wallet"></div>
      <div class="hud-rectangle money-main-3"></div>
      <div class="hud-text money3">$0</div>
      <div class="hud-ellipse icon-circle-3"></div>
      <div class="hud-icon card"></div>
    </div>
  `;
  
  container.innerHTML = hudHTML;
  startDiscordAnimation();
  updateHudScale();
}

function updateHudScale() {
  const hudFrame = document.querySelector('.hud-frame');
  if (!hudFrame) return;
  
  const screenWidth = window.innerWidth;
  const screenHeight = window.innerHeight;
  
  let scale = 1;
  
  if (screenWidth <= 1366) scale = 0.85;
  if (screenWidth <= 1024) scale = 0.75;
  if (screenWidth <= 768) scale = 0.65;
  if (screenHeight <= 768) scale = Math.min(scale, 0.8);
  if (screenHeight <= 600) scale = Math.min(scale, 0.7);
  
  hudFrame.style.setProperty('--hud-scale', scale);
}

function startDiscordAnimation() {
  const discordText = document.querySelector('.discord-text');
  const tebexText = document.querySelector('.tebex-text');
  
  if (!discordText || !tebexText) return;
  
  let isDiscordVisible = true;
  
  function toggleText() {
    if (isDiscordVisible) {
      discordText.classList.remove('active');
      tebexText.classList.add('active');
    } else {
      tebexText.classList.remove('active');
      discordText.classList.add('active');
    }
    isDiscordVisible = !isDiscordVisible;
  }
  setInterval(toggleText, 5000);
}

function formatMoney(val) {
  return '$' + val.toLocaleString('fr-FR');
}

function pxToVw(px) {
  return (px / window.innerWidth) * 100;
}

function pxToVh(px) {
  return (px / window.innerHeight) * 100;
}

function hideHud() {
  const hudFrame = document.querySelector('.hud-frame');
  if (hudFrame) {
    hudFrame.style.opacity = '0';
    hudFrame.style.transition = 'opacity 0.3s ease-out';
  }
}

function showHud() {
  const hudFrame = document.querySelector('.hud-frame');
  if (hudFrame) {
    hudFrame.style.opacity = '1';
    hudFrame.style.transition = 'opacity 0.3s ease-in';
  }
}

window.setHudValues = function(arr) {
  const moneyClasses = ['money1', 'money2', 'money3'];
  const rectClasses = ['money-main-1', 'money-main-2', 'money-main-3'];
  const bgRectClasses = ['money-bg-1', 'money-bg-2', 'money-bg-3'];
  
  const leftMarginVw = 0.94;
  const rightMarginVw = 2.34;
  const rightEdgeVw = 9.11;
  const bgExtraVw = 0.16;
  
  arr.forEach((val, i) => {
    const money = document.querySelector('.hud-text.' + moneyClasses[i]);
    const rect = document.querySelector('.hud-rectangle.' + rectClasses[i]);
    const bgRect = document.querySelector('.hud-rectangle.' + bgRectClasses[i]);
    
    if (money && rect && bgRect) {
      let start = parseInt((money.textContent || '0').replace(/[^0-9]/g, '')) || 0;
      let end = val;
      let duration = 600;
      let stepTime = Math.max(Math.floor(duration / Math.abs(end - start || 1)), 15);
      let startTime = null;
      
      function animateMoney(ts) {
        if (!startTime) startTime = ts;
        let progress = Math.min((ts - startTime) / duration, 1);
        let current = Math.floor(start + (end - start) * progress);
        money.textContent = formatMoney(current);
        
        const tempSpan = document.createElement('span');
        tempSpan.style.visibility = 'hidden';
        tempSpan.style.position = 'absolute';
        tempSpan.style.fontFamily = window.getComputedStyle(money).fontFamily;
        tempSpan.style.fontWeight = window.getComputedStyle(money).fontWeight;
        tempSpan.style.fontSize = window.getComputedStyle(money).fontSize;
        tempSpan.textContent = money.textContent;
        document.body.appendChild(tempSpan);
        
        const realTextWidth = tempSpan.offsetWidth;
        document.body.removeChild(tempSpan);
        
        const textWidthVw = pxToVw(realTextWidth);
        const rectWidthVw = textWidthVw + leftMarginVw + rightMarginVw;
        const leftVw = rightEdgeVw - rectWidthVw;
        
        rect.style.width = rectWidthVw + 'vw';
        rect.style.left = leftVw + 'vw';
        bgRect.style.width = (rectWidthVw + bgExtraVw * 2) + 'vw';
        bgRect.style.left = (leftVw - bgExtraVw) + 'vw';
        money.style.left = (leftVw + leftMarginVw) + 'vw';
        money.style.width = (rectWidthVw - leftMarginVw - rightMarginVw) + 'vw';
        
        if (progress < 1) {
          requestAnimationFrame(animateMoney);
        } else {
          money.textContent = formatMoney(end);
        }
      }
      requestAnimationFrame(animateMoney);
    }
  });
};

window.addEventListener('DOMContentLoaded', function() {
  createHUD();
  window.setHudValues([0, 0, 0]);
});

window.addEventListener('resize', function() {
  updateHudScale();
});

window.addEventListener('message', (event) => {
  const data = event.data;
  if (data.action === 'updateMoney') {
    window.setHudValues([data.black, data.cash, data.bank]);
  } else if (data.action === 'hideHud') {
    hideHud();
  } else if (data.action === 'showHud') {
    showHud();
  } else if (data.type === 'speedometer') {
    handleSpeedometer(data);
  }
});

let lastSpeed = 0;

function handleSpeedometer(data) {
  let speedo = document.getElementById('speedometer');
  if (!speedo) {
    speedo = document.createElement('div');
    speedo.id = 'speedometer';
    speedo.innerHTML = `
      <div id="speedo-bar-bg"></div>
      <div id="speedo-bar"></div>
      <span id="speedo-speed"></span>
      <span id="speedo-gear"></span>
      <span id="speedo-fuel"></span>
      <span id="speedo-kmh">KMH</span>
    `;
    document.body.appendChild(speedo);
  }
  if (data.display) {
    if (!speedo.classList.contains('speedo-visible')) {
      speedo.classList.remove('speedo-hide');
      void speedo.offsetWidth;
      speedo.classList.add('speedo-visible');
    }
    document.getElementById('speedo-speed').textContent = data.speed;
    document.getElementById('speedo-gear').textContent = data.gear;
    document.getElementById('speedo-fuel').textContent = data.fuel + '%';
    let percent = 0;
    if (data.maxSpeed > 0) {
      percent = Math.min(1, data.speed / data.maxSpeed);
    }
    document.getElementById('speedo-bar').style.width = (86 * percent) + 'px';
    if (data.speed > lastSpeed) {
      spawnSpeedoParticles(percent, data.speed);
    }
    lastSpeed = data.speed;
  } else {
    if (speedo.classList.contains('speedo-visible')) {
      speedo.classList.remove('speedo-visible');
      speedo.classList.add('speedo-hide');
      setTimeout(() => {
        speedo.classList.remove('speedo-hide');
      }, 350);
    }
  }
}

function spawnSpeedoParticles(percent, speed) {
  const speedo = document.getElementById('speedometer');
  const bar = document.getElementById('speedo-bar');
  if (!bar) return;
  const rect = bar.getBoundingClientRect();
  const baseX = rect.left + rect.width;
  const baseY = rect.top + rect.height / 2;
  for (let i = 0; i < Math.min(6, 2 + Math.floor(speed / 60)); i++) {
    const p = document.createElement('div');
    p.className = 'speedo-particle';
    p.style.left = (baseX - speedo.getBoundingClientRect().left - 3) + 'px';
    p.style.top = (baseY - speedo.getBoundingClientRect().top - 3) + 'px';
    const angle = (Math.random() * Math.PI / 2) - Math.PI / 4;
    const dist = 30 + Math.random() * 20;
    const dx = Math.cos(angle) * dist;
    const dy = Math.sin(angle) * dist;
    p.style.transform = 'translate(0,0)';
    speedo.appendChild(p);
    setTimeout(() => {
      p.style.transition = 'transform 0.5s cubic-bezier(0.4,0,0.2,1), opacity 0.5s';
      p.style.transform = `translate(${dx}px,${dy}px)`;
      p.style.opacity = 0;
    }, 10);
    setTimeout(() => {
      if (p.parentNode) p.parentNode.removeChild(p);
    }, 600);
  }
}
